generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())
  username      String          @unique
  email         String          @unique
  password      String
  phone         String          @unique
  firebaseUid   String?         @unique
  deletedAt     DateTime?
  carts         Carts?          
  orders        Orders[]
  UserAddresses UserAddresses[]
  isVerified    Boolean         @default(false)
}

model OtpCodes {
  id         Int      @id @default(autoincrement())
  hashedCode String?
  input      String
  expiresAt  DateTime
  isVerified Boolean  @default(false)
  userType   String
  createdAt  DateTime @default(now())
}

model Address {
  id              Int             @id @default(autoincrement())
  buildingNumber  String
  streetName      String          @db.VarChar(255)
  districtId      String
  countryId       Int
  cityId          Int
  apartmentNumber String?
  postalCode      Int?
  deletedAt       DateTime?
  createdAt       DateTime
  updatedAt       DateTime
  isDefault       Boolean
  City            Cities          @relation(fields: [cityId], references: [id], onDelete: NoAction)
  District        District        @relation(fields: [districtId], references: [district_id], onDelete: NoAction)
  orders          Orders[]
  UserAddresses   UserAddresses[]

  @@index([cityId], map: "Address_cityId_fkey")
  @@index([districtId], map: "Address_districtId_fkey")
}

model UserAddresses {
  id        Int      @id @default(autoincrement())
  userId    Int
  addressId Int
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime
  Addresses Address  @relation(fields: [addressId], references: [id], onDelete: Cascade)
  Users     Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, addressId])
  @@index([addressId], map: "UserAddresses_addressId_fkey")
}

model District {
  district_id         String    @id
  zoneId              String
  zoneName            String
  zoneOtherName       String
  districtName        String
  districtOtherName   String
  pickupAvailability  Boolean
  dropOffAvailability Boolean
  cityId              Int
  Addresses           Address[]
  City                Cities    @relation(fields: [cityId], references: [id])

  @@index([cityId], map: "District_cityId_fkey")
}

model Cities {
  id           Int           @id @default(autoincrement())
  name         String
  code         String?
  countryId    Int?
  deletedAt    DateTime?
  createdAt    DateTime      @default(now())
  Addresses    Address[]
  Countries    Countries?    @relation(fields: [countryId], references: [id], onDelete: NoAction)
  Districts    District[]
  ShippingFees ShippingFees?

  @@index([countryId], map: "Cities_countryId_fkey")
}

model ShippingFees {
  id        Int       @id @default(autoincrement())
  cityId    Int       @unique
  fee       Float
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  Cities    Cities    @relation(fields: [cityId], references: [id], onDelete: Cascade)
}

model Countries {
  id        Int       @id @default(autoincrement())
  name      String
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  Cities    Cities[]
}

model Products {
  id            Int             @id @default(autoincrement())
  nameEn        String?
  nameAr        String?
  descriptionEn String?
  descriptionAr String?
  price         Decimal         @db.Decimal(10, 2)
  quantity      Int
  color         String?
  categoryId    Int
  status        productStatus   @default(ACTIVE)
  createdAt     DateTime        @default(now())
  deletedAt     DateTime?
  category      Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  cartItems     cartItems[]
  orderItems    orderItems[]
  productImages productImages[]
  productModel  productModel?   @relation("ProductsModel")

  @@index([categoryId], map: "Products_categoryId_fkey")
}

model productImages {
  id        Int       @id @default(autoincrement())
  productId Int
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  isDefault Boolean   @default(false)
  imagePath String
  Products  Products  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId], map: "productImages_productId_fkey")
}

model productModel {
  id        Int       @id @default(autoincrement())
  productId Int       @unique
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  modelPath String
  Products  Products  @relation("ProductsModel", fields: [productId], references: [id], onDelete: Cascade)
}

model Category {
  id        Int        @id @default(autoincrement())
  nameEn    String?
  nameAr    String?
  imagePath String
  createdAt DateTime   @default(now())
  deletedAt DateTime?
  products  Products[]
}

model Carts {
  id        Int         @id @default(autoincrement())
  userId    Int         @unique
  createdAt DateTime    @default(now())
  deletedAt DateTime?
  Users     Users       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems cartItems[]
}

model cartItems {
  quantity  Int
  productId Int
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  cartId    Int
  Carts     Carts     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  Products  Products  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@index([productId], map: "cartItems_productId_fkey")
}

model Admins {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String
  createdAt DateTime   @default(now())
  deletedAt DateTime?
  adminRole AdminRole? @default(SuperAdmin)
}

model Orders {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  deletedAt  DateTime?
  userId     Int
  addressId  Int
  shipping   Int
  total      Int
  status     OrderStatus  @default(PENDING)
  address    Address      @relation(fields: [addressId], references: [id])
  user       Users        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems orderItems[]

  @@index([addressId], map: "Orders_addressId_fkey")
  @@index([userId], map: "Orders_userId_fkey")
}

model orderItems {
  id        Int       @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Int
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  order     Orders    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Products  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId], map: "orderItems_orderId_fkey")
  @@index([productId], map: "orderItems_productId_fkey")
}

enum productStatus {
  ACTIVE
  OUTOFSTOCK
}

enum AdminRole {
  NormalAdmin
  SuperAdmin
}

enum OrderStatus {
  PENDING
  DELIVERED
  CANCELLED
}
